import pytest

from aoc2021.solutions import day18

data = """\
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
"""


def test_my_solution():
    part1, part2 = day18.run(data)
    assert part1 == 4140
    assert part2 == 3993


@pytest.mark.parametrize(
    ("tree1", "tree2", "total_want"),
    (
        (
            [[[[4, 3], 4], 4], [7, [[8, 4], 9]]],
            [1, 1],
            [[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]],
        ),
        (
            [[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]],
            [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]],
            [[[[4, 0], [5, 4]], [[7, 7], [6, 0]]], [[8, [7, 7]], [[7, 9], [5, 0]]]],
        ),
        (
            [[2, [[7, 7], 7]], [[5, 8], [[9, 3], [0, 2]]]],
            [[[0, [5, 8]], [[1, 7], [9, 6]]], [[4, [1, 2]], [[1, 4], 2]]],
            [
                [[[7, 8], [6, 6]], [[6, 0], [7, 7]]],
                [[[7, 8], [8, 8]], [[7, 9], [0, 6]]],
            ],
        ),
    ),
)
def test_add(tree1, tree2, total_want):
    t1 = day18.parse(tree1)
    t2 = day18.parse(tree2)
    total = day18.add(t1, t2).to_list()
    assert total == total_want


@pytest.mark.parametrize(
    ("tree", "magnitude"),
    (
        ([[1, 2], [[3, 4], 5]], 143),
        ([[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]], 1384),
        ([[[[1, 1], [2, 2]], [3, 3]], [4, 4]], 445),
        ([[[[3, 0], [5, 3]], [4, 4]], [5, 5]], 791),
        ([[[[5, 0], [7, 4]], [5, 5]], [6, 6]], 1137),
        ([[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]], 3488),
        (
            [
                [[[7, 8], [6, 6]], [[6, 0], [7, 7]]],
                [[[7, 8], [8, 8]], [[7, 9], [0, 6]]],
            ],
            3993,
        ),
    ),
)
def test_magnitude(tree, magnitude):
    node = day18.parse(tree)
    assert node.magnitude == magnitude


@pytest.mark.parametrize(
    ("before", "after"),
    (
        ([[[[[9, 8], 1], 2], 3], 4], [[[[0, 9], 2], 3], 4]),
        ([7, [6, [5, [4, [3, 2]]]]], [7, [6, [5, [7, 0]]]]),
        ([[6, [5, [4, [3, 2]]]], 1], [[6, [5, [7, 0]]], 3]),
        (
            [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]],
            [[3, [2, [8, 0]]], [9, [5, [4, [3, 2]]]]],
        ),
        (
            [[3, [2, [8, 0]]], [9, [5, [4, [3, 2]]]]],
            [[3, [2, [8, 0]]], [9, [5, [7, 0]]]],
        ),
    ),
)
def test_explode(before, after):
    node_before = day18.parse(before)
    assert day18.explode(node_before) is True
    assert node_before.to_list() == after
